@model Kartverket.Models.ChangeOverviewModel

@{
    ViewData["Title"] = "Overview";
}

<h2>Oversikt av registrerte endringer</h2>

<table class="table">
    <thead> <!-- Add thead element for table header -->
        <tr>
            <th>Saks ID</th> <!-- Add table header cells -->
            <th>Saks Type</th>
            <th>Saks Dato</th>
            <th>GeoJson</th>
            <th>Beskrivelse</th>            
        </tr>
    </thead>
    <tbody>
        @foreach (var change in Model.AreaChanges)
        {
                <tr>
                    <td>@change.IssueId</td>
                    <td>@change.IssueType</td>
                    <td>@change.IssueDate</td>
                    <td>@change.GeoJson</td>
                    <td>@change.Description</td>                
                </tr>
        }
    </tbody>
    <thead>
        <tr>
            <th>Kommunenavn</th>
            <th>Kommunenummer</th>
            <th>Fylkesnavn</th>
            <th>Fylkesnummer</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var change in Model.AreaChanges)
        {
                <tr>
                    <td>@change.Kommunenavn</td>
                    <td>@change.Kommunenummer</td>
                    <td>@change.Fylkesnavn</td>
                    <td>@change.Fylkesnummer</td>
                </tr>
        }
    </tbody>

</table>

<div id="map" style="height: 500px;"></div>

@section Scripts {
        <script src="~/js/leafletMap.js"></script>    

        <script>

        // Initialize a feature group to hold all layers
        var allLayers = new L.FeatureGroup();
        map.addLayer(allLayers);

            //Serializes the information stored in the AreaChanges model into JSON so it can be parsed
            var drawnChanges = @Html.Raw(Json.Serialize(Model.AreaChanges));

             //Checks each drawnChange and parses the information of the coordinates with the GeoJson.
             drawnChanges.forEach(function (change) {
                var geoJsonData = JSON.parse(change.geoJson);

              //Then it adds the description as a popup when the drawnChange is clicked on the leaflet map.
               var drawnLayer = L.geoJSON(geoJsonData).bindPopup(change.description);
               allLayers.addLayer(drawnLayer);
         

                // Extract coordinates from GeoJSON
                var geocoordinates = geoJsonData.geometry.coordinates;
                if (geocoordinates && geocoordinates.length >= 2) {
                    var latitude = geocoordinates[1];
                    var longitude = geocoordinates[0];

                    console.log(`Processing change ID ${change.issueId} with coordinates: ${latitude}, ${longitude}`);

                    // Construct the URL for reverse geocoding
                    var url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}`;

                    // Fetch the address using reverse geocoding
                    fetch(url)
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`Network response was not ok: ${response.statusText}`);
                            }
                            return response.json();
                        })
                        .then(data => {
                            console.log(`Received data for change ID ${change.issueId}:`, data);
                            var address = data.display_name ? data.display_name : "Address not found";
                            var popupContent = `${change.description}<br>Address: ${address}`;
                            drawnLayer .setPopupContent(popupContent).openPopup();
                            console.log(`Popup updated for change ID ${change.issueId}: ${popupContent}`);
                        })
                        .catch(error => {
                            var popupContent = `${change.description}<br>Address not available`;
                            drawnLayer .setPopupContent(popupContent).openPopup();
                            console.error(`Failed to update popup for change ID ${change.issueId}: ${error}`);
                        });
                } else {
                        console.error(`Invalid coordinates for change ID ${change.issueId}`);
                }
            });

            // Fit the map bounds to all layers
            if (allLayers.getLayers().length > 0) {
                var bounds = allLayers.getBounds();
                console.log("Fitting bounds:", bounds);
                map.fitBounds(bounds);

                // Force map update
                map.invalidateSize();
            }

            // Handle the draw event
            map.on(L.Draw.Event.CREATED, function (e) {
                var type = e.layerType,
                        drawnLayer  = e.layer;

                // Add the new layer to the feature group
                allLayers.addLayer(layer);

                // Recalculate the bounds of all layers
                var bounds = allLayers.getBounds();
                console.log("Updated bounds:", bounds);

                if (bounds.isValid()) {
                    console.log("Fitting updated bounds:", bounds);
                    map.fitBounds(bounds);

                    // Force map update
                    map.invalidateSize();
                } else {
                    console.error("Invalid updated bounds:", bounds);
                }
            });
        </script>
}